% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/build_archive.R
\name{build_archive}
\alias{build_archive}
\title{Build a Darwin Core Archive from a folder}
\usage{
build_archive(directory = "data")
}
\arguments{
\item{directory}{A directory containing the files to be published. Defaults
to the \code{data} folder within the current working directory.}
}
\value{
Called exclusively for the side-effect of building a 'Darwin Core
Archive' (i.e. a zip file); doesn't return anything to the workspace.
}
\description{
A Darwin Core archive is a zip file with a specified combination of data
and metadata. This function assumes that all of these file types have been
pre-constructed, and can be found inside a single folder, with no additional
or redundant information. This function is similar to \code{devtools::build()},
in the sense that it takes a repository and wraps it for publication, without
assessing the contents in any meaningful way. It differs from
\code{devtools::build()} in that it builds a Darwin Core Archive, rather than an
R package.
}
\details{
This function looks for three types of objects in the specified \code{directory}:
\itemize{
\item One or more \code{csv} files such as \code{occurrences.csv} &/or \code{events.csv}.
These will be manipulated versions of the raw dataset, which have been
altered to use Darwin Core terms as column headers. The functions
\code{suggest_workflow()} and \code{check_occurrences()} may be useful here.
\item A metadata statement, stored in xml using the filename \code{eml.xml}. This can
be constructed manually, or using \code{use_bd_metadata()} to create a markdown
file followed by \code{build_metadata()} to save it in xml.
\item A 'schema' document, also stored in xml, called \code{meta.xml}. This is
usually constructed automatically using \code{build_schema()}.
}

You will get an error if these files are not present. The resulting file
shares the name of the wprking directory (with a .zip file extension),
and is placed in the parent directory
}
